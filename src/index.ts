import plugin from 'tailwindcss/plugin';
import type { OptionalConfig } from 'tailwindcss/types/config';
import { deepMerge } from './deepMerge';
import tokens from './tokens';

export const typographyPlugin = plugin(({ addUtilities }) => {
  addUtilities({
    '.typography-h1': {
      fontSize: tokens.TypographyH1FontSize,
      lineHeight: tokens.TypographyH1LineHeight,
      fontWeight: tokens.TypographyH1FontWeight,
      letterSpacing: tokens.TypographyH1LetterSpacing,
    },
    '.typography-h2': {
      fontSize: tokens.TypographyH2FontSize,
      lineHeight: tokens.TypographyH2LineHeight,
      fontWeight: tokens.TypographyH2FontWeight,
      letterSpacing: tokens.TypographyH2LetterSpacing,
    },
    '.typography-h3': {
      fontSize: tokens.TypographyH3FontSize,
      lineHeight: tokens.TypographyH3LineHeight,
      fontWeight: tokens.TypographyH3FontWeight,
      letterSpacing: tokens.TypographyH3LetterSpacing,
    },
    '.typography-h4': {
      fontSize: tokens.TypographyH4FontSize,
      lineHeight: tokens.TypographyH4LineHeight,
      fontWeight: tokens.TypographyH4FontWeight,
      letterSpacing: tokens.TypographyH4LetterSpacing,
    },
    '.typography-h5': {
      fontSize: tokens.TypographyH5FontSize,
      lineHeight: tokens.TypographyH5LineHeight,
      fontWeight: tokens.TypographyH5FontWeight,
      letterSpacing: tokens.TypographyH5LetterSpacing,
    },
    '.typography-h6': {
      fontSize: tokens.TypographyH6FontSize,
      lineHeight: tokens.TypographyH6LineHeight,
      fontWeight: tokens.TypographyH6FontWeight,
      letterSpacing: tokens.TypographyH6LetterSpacing,
    },
    '.typography-subtitle1': {
      fontSize: tokens.TypographySubtitle1FontSize,
      lineHeight: tokens.TypographySubtitle1LineHeight,
      fontWeight: tokens.TypographySubtitle1FontWeight,
      letterSpacing: tokens.TypographySubtitle1LetterSpacing,
    },
    '.typography-subtitle2': {
      fontSize: tokens.TypographySubtitle2FontSize,
      lineHeight: tokens.TypographySubtitle2LineHeight,
      fontWeight: tokens.TypographySubtitle2FontWeight,
      letterSpacing: tokens.TypographySubtitle2LetterSpacing,
    },
    '.typography-body1': {
      fontSize: tokens.TypographyBody1FontSize,
      lineHeight: tokens.TypographyBody1LineHeight,
      fontWeight: tokens.TypographyBody1FontWeight,
      letterSpacing: tokens.TypographyBody1LetterSpacing,
    },
    '.typography-body2': {
      fontSize: tokens.TypographyBody2FontSize,
      lineHeight: tokens.TypographyBody2LineHeight,
      fontWeight: tokens.TypographyBody2FontWeight,
      letterSpacing: tokens.TypographyBody2LetterSpacing,
    },
    '.typography-button': {
      fontSize: tokens.TypographyButtonFontSize,
      lineHeight: tokens.TypographyButtonLineHeight,
      fontWeight: tokens.TypographyButtonFontWeight,
      letterSpacing: tokens.TypographyButtonLetterSpacing,
    },
    '.typography-caption': {
      fontSize: tokens.TypographyCaptionFontSize,
      lineHeight: tokens.TypographyCaptionLineHeight,
      fontWeight: tokens.TypographyCaptionFontWeight,
      letterSpacing: tokens.TypographyCaptionLetterSpacing,
    },
    '.typography-overline': {
      fontSize: tokens.TypographyOverlineFontSize,
      lineHeight: tokens.TypographyOverlineLineHeight,
      fontWeight: tokens.TypographyOverlineFontWeight,
      letterSpacing: tokens.TypographyOverlineLetterSpacing,
    },
  });
});

export const theme: OptionalConfig['theme'] = {
  screens: {
    screen1: tokens.BreakpointsXs,
    screen2: tokens.BreakpointsSm,
    screen3: tokens.BreakpointsMd,
    screen4: tokens.BreakpointsLg,
    screen5: tokens.BreakpointsXl,
  },
  colors: {
    violet: {
      '50': tokens.ColorViolet50,
      '100': tokens.ColorViolet100,
      '200': tokens.ColorViolet200,
      '300': tokens.ColorViolet300,
      '400': tokens.ColorViolet400,
      '500': tokens.ColorViolet500,
      '600': tokens.ColorViolet600,
      '700': tokens.ColorViolet700,
      '800': tokens.ColorViolet800,
      '900': tokens.ColorViolet900,
    },
    navy: {
      '50': tokens.ColorNavy50,
      '100': tokens.ColorNavy100,
      '200': tokens.ColorNavy200,
      '300': tokens.ColorNavy300,
      '400': tokens.ColorNavy400,
      '500': tokens.ColorNavy500,
      '600': tokens.ColorNavy600,
      '700': tokens.ColorNavy700,
      '800': tokens.ColorNavy800,
      '900': tokens.ColorNavy900,
    },
    blue: {
      '50': tokens.ColorBlue50,
      '100': tokens.ColorBlue100,
      '200': tokens.ColorBlue200,
      '300': tokens.ColorBlue300,
      '400': tokens.ColorBlue400,
      '500': tokens.ColorBlue500,
      '600': tokens.ColorBlue600,
      '700': tokens.ColorBlue700,
      '800': tokens.ColorBlue800,
      '900': tokens.ColorBlue900,
    },
    indigo: {
      '50': tokens.ColorIndigo50,
      '100': tokens.ColorIndigo100,
      '200': tokens.ColorIndigo200,
      '300': tokens.ColorIndigo300,
      '400': tokens.ColorIndigo400,
      '500': tokens.ColorIndigo500,
      '600': tokens.ColorIndigo600,
      '700': tokens.ColorIndigo700,
      '800': tokens.ColorIndigo800,
      '900': tokens.ColorIndigo900,
    },
    cerise: {
      '50': tokens.ColorCerise50,
      '100': tokens.ColorCerise100,
      '200': tokens.ColorCerise200,
      '300': tokens.ColorCerise300,
      '400': tokens.ColorCerise400,
      '500': tokens.ColorCerise500,
      '600': tokens.ColorCerise600,
      '700': tokens.ColorCerise700,
      '800': tokens.ColorCerise800,
      '900': tokens.ColorCerise900,
    },
    cocoa: {
      '50': tokens.ColorCocoa50,
      '100': tokens.ColorCocoa100,
      '200': tokens.ColorCocoa200,
      '300': tokens.ColorCocoa300,
      '400': tokens.ColorCocoa400,
      '500': tokens.ColorCocoa500,
      '600': tokens.ColorCocoa600,
      '700': tokens.ColorCocoa700,
      '800': tokens.ColorCocoa800,
      '900': tokens.ColorCocoa900,
    },
    gold: {
      '50': tokens.ColorGold50,
      '100': tokens.ColorGold100,
      '200': tokens.ColorGold200,
      '300': tokens.ColorGold300,
      '400': tokens.ColorGold400,
      '500': tokens.ColorGold500,
      '600': tokens.ColorGold600,
      '700': tokens.ColorGold700,
      '800': tokens.ColorGold800,
      '900': tokens.ColorGold900,
    },
    lemon: {
      '50': tokens.ColorLemon50,
      '100': tokens.ColorLemon100,
      '200': tokens.ColorLemon200,
      '300': tokens.ColorLemon300,
      '400': tokens.ColorLemon400,
      '500': tokens.ColorLemon500,
      '600': tokens.ColorLemon600,
      '700': tokens.ColorLemon700,
      '800': tokens.ColorLemon800,
      '900': tokens.ColorLemon900,
    },
    green: {
      '50': tokens.ColorGreen50,
      '100': tokens.ColorGreen100,
      '200': tokens.ColorGreen200,
      '300': tokens.ColorGreen300,
      '400': tokens.ColorGreen400,
      '500': tokens.ColorGreen500,
      '600': tokens.ColorGreen600,
      '700': tokens.ColorGreen700,
      '800': tokens.ColorGreen800,
      '900': tokens.ColorGreen900,
    },
    submarine: {
      '50': tokens.ColorSubmarine50,
      '100': tokens.ColorSubmarine100,
      '200': tokens.ColorSubmarine200,
      '300': tokens.ColorSubmarine300,
      '400': tokens.ColorSubmarine400,
      '500': tokens.ColorSubmarine500,
      '600': tokens.ColorSubmarine600,
      '700': tokens.ColorSubmarine700,
      '800': tokens.ColorSubmarine800,
      '900': tokens.ColorSubmarine900,
    },
  },
  extend: {
    borderRadius: {
      DEFAULT: tokens.Radius,
    },
    transitionDuration: {
      DEFAULT: tokens.TransitionsDurationStandard,
    },
    colors: {
      text: {
        primary: tokens.ColorTextPrimary,
        secondary: tokens.ColorTextSecondary,
        disabled: tokens.ColorTextDisabled,
      },
      divider: tokens.ColorDivider,
      background: {
        default: tokens.ColorBackgroundDefault,
        paper: tokens.ColorBackgroundPaper,
      },
      action: {
        active: tokens.ColorActionActive,
        hover: tokens.ColorActionHover,
        activeHover: tokens.ColorActionHover,
        hoverOpacity: tokens.ColorActionHoverOpacity,
        selected: tokens.ColorActionSelected,
        selectedOpacity: tokens.ColorActionSelectedOpacity,
        disabled: tokens.ColorActionDisabled,
        disabledBackground: tokens.ColorActionDisabledBackground,
        disabledOpacity: tokens.ColorActionDisabledOpacity,
        focus: tokens.ColorActionFocus,
        focusOpacity: tokens.ColorActionFocusOpacity,
        activatedOpacity: tokens.ColorActionActivatedOpacity,
      },
      common: {
        black: tokens.ColorCommonBlack,
        white: tokens.ColorCommonWhite,
      },
      primary: {
        DEFAULT: tokens.ColorPrimaryMain,
        contraText: tokens.ColorPrimaryContrastText,
      },
      secondary: {
        DEFAULT: tokens.ColorSecondaryMain,
        contraText: tokens.ColorSecondaryContrastText,
      },
      success: {
        DEFAULT: tokens.ColorSuccessMain,
        contrastText: tokens.ColorSuccessContrastText,
      },
      error: {
        DEFAULT: tokens.ColorErrorMain,
        contrastText: tokens.ColorErrorContrastText,
      },
    },
    fontFamily: {
      sans: [
        '-apple-system',
        'BlinkMacSystemFont',
        '"Helvetica Neue"',
        '"Segoe UI"',
        '"Hiragino Kaku Gothic ProN"',
        '"Hiragino Sans"',
        'Arial',
        'Meiryo',
      ],
      serif: ['ui-serif', 'Georgia'],
      mono: [
        '"JetBrains Mono"',
        'monospace',
        'ui-monospace',
        'Menlo',
        'Monaco',
        '"Cascadia Mono"',
        '"Segoe UI Mono"',
        '"Roboto Mono"',
        '"Oxygen Mono"',
        '"Ubuntu Monospace"',
        '"Source Code Pro"',
        '"Fira Mono"',
        '"Droid Sans Mono"',
        '"Courier New"',
      ],
    },
  },
};

export const createTheme = (customTheme?: OptionalConfig['theme']): OptionalConfig['theme'] => {
  return deepMerge(theme, customTheme);
};
